pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = 'your-docker-hub-repo'
        KUBECONFIG = '/path/to/.kube/config'
        NGROK_AUTHTOKEN = credentials('ngrok_authtoken')
        BECOME_PASSWORD = credentials('ansible_become_password')
    }

    stages {
        stage('Cleanup') {
            steps {
                script {
                    echo "Cleaning up old resources..."
                    sh '''
                    helm uninstall monitoring-stack --namespace monitoring || true
                    kubectl delete namespace monitoring || true
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_HUB_REPO}:latest")
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker') {
                        docker.image("${DOCKER_HUB_REPO}:latest").push()
                    }
                }
            }
        }

        stage('Cache Docker Images') {
            steps {
                script {
                    sh '''
                    echo "Caching Docker images..."
                    minikube image load quay.io/prometheus/prometheus:v2.54.1
                    minikube image load grafana/grafana:11.2.2-security-01
                    '''
                }
            }
        }

        stage('Install Monitoring Stack with Ansible') {
            steps {
                script {
                    sh 'ansible-playbook -i /path/to/inventory /path/to/monitoring_playbook.yml --extra-vars "ansible_become_pass=$BECOME_PASSWORD"'
                }
            }
        }

        stage('Start Ngrok Tunnel for Grafana') {
            steps {
                script {
                    def nodeIp = sh(returnStdout: true, script: "minikube ip").trim()
                    sh '''
                    ngrok authtoken ${NGROK_AUTHTOKEN}
                    ngrok http ${nodeIp}:32000 --log=stdout > ngrok.log &
                    sleep 5
                    '''
                    def publicUrl = sh(returnStdout: true, script: "curl --silent http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url'").trim()
                    echo "Access Grafana at: ${publicUrl}"
                }
            }
        }

        stage('Check Service Availability') {
            steps {
                script {
                    def nodeIp = sh(returnStdout: true, script: "minikube ip").trim()
                    def services = [
                        ['name': 'Grafana', 'url': "http://${nodeIp}:32000"],
                        ['name': 'Prometheus', 'url': "http://${nodeIp}:30900"]
                    ]
                    for (service in services) {
                        echo "Checking ${service.name} availability..."
                        sh "curl --fail --connect-timeout 5 ${service.url} || echo '${service.name} is not available'"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
