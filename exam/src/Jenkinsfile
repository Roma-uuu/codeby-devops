pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                // Клонируем репозиторий в ветке exam
                git branch: 'exam', url: 'https://github.com/Roma-uuu/codeby-devops.git'
            }
        }
        stage('Build') {
            steps {
                // Выполняем сборку Maven в директории exam/src, где находится pom.xml
                dir('exam/src') {
                    sh 'mvn clean package -Dcheckstyle.skip=true'
                }
            }
        }
        stage('Test Docker Access') {
            steps {
                sh 'docker info'
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                // Указываем правильную директорию exam/src для Docker build
                dir('exam/src') {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_TOKEN')]) {
                        sh '''
                        echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
                        docker build -t apkerigz/devops:v.0.0.44 .
                        docker push apkerigz/devops:v.0.0.44
                        '''
                    }
                }
            }
        }
        stage('Verify Files') {
            steps {
                // Проверяем наличие файлов Kubernetes манифестов
                sh 'ls -la exam/src/k8s/'
            }
        }
        stage('Check kubectl') {
            steps {
                sh 'which kubectl || echo "kubectl not found"'
                sh 'kubectl version --client || echo "kubectl not available"'
            }
        }
        stage('Test Kubernetes Connection') {
            steps {
                // Проверяем подключение к кластеру Kubernetes с использованием kubeconfig
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    sh 'kubectl cluster-info --kubeconfig=$KUBECONFIG_FILE'
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                // Применяем манифесты Kubernetes из директории exam/src/k8s
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    sh '''
                    kubectl apply -f exam/src/k8s/deployment.yaml --kubeconfig=$KUBECONFIG_FILE
                    kubectl apply -f exam/src/k8s/service.yaml --kubeconfig=$KUBECONFIG_FILE
                    '''
                }
            }
        }
    }
}
