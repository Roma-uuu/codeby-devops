pipeline {
    agent any

    environment {
        appVersion = readFile('/home/rsshabanov/codeby-devops/exam/src/VERSION').trim()
        BECOME_PASSWORD = credentials('for_ansible')  // Укажите ID Jenkins Credentials для sudo пароля
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()  // Полная очистка рабочего пространства перед началом работы
            }
        }
        stage('Checkout') {
            steps {
                retry(3) {
                    git branch: 'exam', url: 'https://github.com/Roma-uuu/codeby-devops.git'
                }
            }
        }
        stage('Build') {
            steps {
                dir('exam/src') {
                    sh 'mvn clean package -Dcheckstyle.skip=true'
                }
            }
        }
        stage('Test Docker Access') {
            steps {
                script {
                    try {
                        sh 'docker info'
                    } catch (Exception e) {
                        echo 'Docker is not accessible!'
                        error 'Failing the build due to Docker issue'
                    }
                }
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                dir('exam/src') {
                    script {
                        echo "Building Docker image with tag: ${appVersion}"
                        withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_TOKEN')]) {
                            retry(3) {
                                sh """
                                echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
                                docker build -t apkerigz/devops:${appVersion} .
                                docker push apkerigz/devops:${appVersion}
                                """
                            }
                        }
                    }
                }
            }
        }
        stage('Deploy using Helm') {
            steps {
                withCredentials([string(credentialsId: 'k8s-sa-token', variable: 'K8S_TOKEN')]) {
                    dir('exam/src/mychart') {
                        script {
                            echo "Deploying Helm chart with image tag: ${appVersion}"
                            sh """
                            helm upgrade --install petclinic-app . \
                                --set image.repository=apkerigz/devops \
                                --set image.tag=${appVersion} \
                                --kubeconfig=/home/rsshabanov/codeby-devops/exam/src/kubeconfig-jenkins.yaml
                            """
                        }
                    }
                }
            }
        }
        stage('Run Ansible Playbook') {
            steps {
                dir('exam/src') {
                    script {
                        // Создание ansible.cfg для указания пути к коллекциям
                        sh '''
                        echo "[defaults]" > ansible.cfg
                        echo "collections_paths = /home/rsshabanov/.ansible/collections:/usr/share/ansible/collections" >> ansible.cfg
                        '''

                        // Установка коллекции и запуск плейбука с передачей sudo-пароля через переменную
                        sh 'ansible-galaxy collection install kubernetes.core'
                        sh "ansible-playbook -i inventory monitoring_playbook.yml --extra-vars 'ansible_become_pass=${BECOME_PASSWORD}'"
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()  // Очистка рабочего пространства в конце пайплайна
        }
    }
}
