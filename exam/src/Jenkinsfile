pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = 'apkerigz/devops'
        KUBECONFIG = '/home/rsshabanov/codeby-devops/exam/src/kubeconfig-jenkins.yaml'
        appVersion = readFile('/home/rsshabanov/codeby-devops/exam/src/VERSION').trim()
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                retry(3) {
                    git branch: 'exam', url: 'https://github.com/Roma-uuu/codeby-devops.git'
                }
            }
        }

        stage('Build Application') {
            steps {
                dir('exam/src') {
                    sh 'mvn clean package -Dcheckstyle.skip=true'
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                dir('exam/src') {
                    script {
                        echo "Building Docker image with tag: ${appVersion}"
                        withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_TOKEN')]) {
                            sh '''
                                echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
                                docker build -t $DOCKER_HUB_REPO:${appVersion} .
                                docker push $DOCKER_HUB_REPO:${appVersion}
                            '''
                        }
                    }
                }
            }
        }

        stage('Deploy Helm Chart') {
            steps {
                dir('exam/src/mychart') {
                    script {
                        echo "Deploying Helm chart with image tag: ${appVersion}"
                        withCredentials([string(credentialsId: 'k8s-sa-token', variable: 'K8S_TOKEN')]) {
                            sh '''
                            helm upgrade --install petclinic-app . \
                            --set image.repository=$DOCKER_HUB_REPO \
                            --set image.tag=${appVersion} \
                            --kubeconfig=$KUBECONFIG \
                            --set serviceAccount.token=$K8S_TOKEN
                            '''
                        }
                    }
                }
            }
        }

        stage('Install Required Ansible Collections') {
            steps {
                // Установка коллекций kubernetes.core и community.general
                sh 'ansible-galaxy collection install kubernetes.core'
                sh 'ansible-galaxy collection install community.general'
            }
        }

        stage('Deploy Monitoring Stack via Ansible') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'for_ansible', variable: 'BECOME_PASSWORD')]) {
                        sh '''
                        ansible-playbook -i /home/rsshabanov/codeby-devops/exam/src/inventory /home/rsshabanov/codeby-devops/exam/src/monitoring_playbook.yml \
                        --extra-vars "ansible_become_pass=$BECOME_PASSWORD"
                        '''
                    }
                }
            }
        }

        stage('Start Ngrok Tunnel') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'ngrok_authtoken', variable: 'NGROK_AUTHTOKEN')]) {
                        def nodeIp = sh(returnStdout: true, script: "minikube ip").trim()
                        sh '''
                        ngrok authtoken $NGROK_AUTHTOKEN
                        ngrok http ${nodeIp}:30000 --log=stdout > ngrok.log &
                        sleep 5
                        '''
                        def publicUrl = sh(returnStdout: true, script: "curl --silent http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url'").trim()
                        echo "Access the application at: ${publicUrl}"
                    }
                }
            }
        }

        stage('Check Service Availability') {
            steps {
                script {
                    def nodeIp = sh(returnStdout: true, script: "minikube ip").trim()
                    def services = [
                        ['name': 'Grafana', 'url': "http://${nodeIp}:32000"],
                        ['name': 'Prometheus', 'url': "http://${nodeIp}:30900"],
                        ['name': 'Petclinic Application', 'url': "http://${nodeIp}:30000"]
                    ]

                    for (service in services) {
                        echo "Checking ${service.name} availability..."
                        sh "curl --fail --connect-timeout 5 ${service.url} || echo '${service.name} is not available'"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
