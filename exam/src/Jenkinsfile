pipeline {
    agent any

    environment {
        appVersion = readFile('/home/rsshabanov/codeby-devops/exam/src/VERSION').trim()
        BECOME_PASSWORD = credentials('for_ansible')  // Укажите ID Jenkins Credentials для sudo пароля
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        K8S_TOKEN = credentials('k8s_token')
        KUBECONFIG = '/home/rsshabanov/codeby-devops/exam/src/kubeconfig-jenkins.yaml'
        NGROK_AUTHTOKEN = credentials('ngrok_authtoken')
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()  // Полная очистка рабочего пространства перед началом работы
            }
        }

        stage('Checkout') {
            steps {
                retry(3) {
                    git branch: 'exam', url: 'https://github.com/Roma-uuu/codeby-devops.git'
                }
            }
        }

        stage('Build Application') {
            steps {
                dir('exam/src') {
                    sh 'mvn clean package -Dcheckstyle.skip=true'
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                dir('exam/src') {
                    script {
                        echo "Building Docker image with tag: ${appVersion}"
                        withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_TOKEN')]) {
                            retry(3) {
                                sh """
                                echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
                                docker build -t apkerigz/devops:${appVersion} .
                                docker push apkerigz/devops:${appVersion}
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy Helm Chart') {
            steps {
                dir('exam/src/mychart') {
                    script {
                        echo "Deploying Helm chart with image tag: ${appVersion}"
                        sh """
                        helm upgrade --install petclinic-app . \
                        --set image.repository=apkerigz/devops \
                        --set image.tag=${appVersion} \
                        --kubeconfig=${KUBECONFIG}
                        """
                    }
                }
            }
        }

        stage('Deploy Monitoring Stack via Ansible') {
            steps {
                script {
                    sh """
                    ansible-playbook -i inventory monitoring_playbook.yml \
                    --extra-vars "ansible_become_pass=${BECOME_PASSWORD}" 
                    """
                }
            }
        }

        stage('Expose Application via Ngrok') {
            steps {
                script {
                    def nodeIp = sh(returnStdout: true, script: "minikube ip").trim()

                    sh """
                    echo "Setting up Ngrok..."
                    ngrok authtoken ${NGROK_AUTHTOKEN}
                    ngrok http ${nodeIp}:30000 --log=stdout > ngrok.log &
                    sleep 5
                    """

                    def publicUrl = sh(returnStdout: true, script: "curl --silent http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url'").trim()
                    echo "Access the application at: ${publicUrl}"
                }
            }
        }

        stage('Test Service Availability') {
            steps {
                script {
                    def nodeIp = sh(returnStdout: true, script: "minikube ip").trim()

                    def services = [
                        ['name': 'Grafana', 'url': "http://${nodeIp}:32000"],
                        ['name': 'Prometheus', 'url': "http://${nodeIp}:30900"]
                    ]

                    for (service in services) {
                        echo "Checking ${service.name} availability..."
                        sh "curl --fail --connect-timeout 5 ${service.url} || echo '${service.name} is not available'"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline finished successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
