pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = 'apkerigz/devops'
        appVersion = readFile('/home/rsshabanov/codeby-devops/exam/src/VERSION').trim()
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                retry(3) {
                    git branch: 'exam', url: 'https://github.com/Roma-uuu/codeby-devops.git'
                }
            }
        }

        stage('Build Application') {
            steps {
                dir('exam/src') {
                    sh 'mvn clean package -Dcheckstyle.skip=true'
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                dir('exam/src') {
                    script {
                        echo "Building Docker image with tag: ${appVersion}"
                        withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_TOKEN')]) {
                            sh '''
                                echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
                                docker build -t $DOCKER_HUB_REPO:${appVersion} .
                                docker push $DOCKER_HUB_REPO:${appVersion}
                            '''
                        }
                    }
                }
            }
        }

        stage('Deploy Application to Minikube') {
            steps {
                script {
                    sh '''
                    kubectl create deployment petclinic --image=$DOCKER_HUB_REPO:${appVersion} --dry-run=client -o yaml | kubectl apply -f -
                    kubectl expose deployment petclinic --type=NodePort --port=8080 --target-port=8080 --name=petclinic-service
                    '''
                }
            }
        }

        stage('Start Ngrok Tunnel') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'ngrok_authtoken', variable: 'NGROK_AUTHTOKEN')]) {
                        def nodeIp = sh(returnStdout: true, script: "minikube ip").trim()
                        sh '''
                        ngrok authtoken $NGROK_AUTHTOKEN
                        ngrok http ${nodeIp}:30000 --log=stdout > ngrok.log &
                        sleep 5
                        '''
                        def publicUrl = sh(returnStdout: true, script: "curl --silent http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url'").trim()
                        echo "Access the application at: ${publicUrl}"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
