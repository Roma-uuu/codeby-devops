pipeline {
    agent any
    stages {
        stage('Prepare') {
            steps {
                script {
                    // Получаем полную историю коммитов
                    sh 'git fetch --unshallow || true'

                    // Получаем список измененных файлов
                    changedFiles = sh(returnStdout: true, script: 'git show --pretty="" --name-only').trim().split('\n')

                    // Инициализируем список приложений для сборки
                    appsToBuild = []

                    // Проверяем, какие приложения изменились
                    if (changedFiles.any { it.startsWith('HelloWorld/') }) {
                        appsToBuild.add('HelloWorld')
                    }
                    if (changedFiles.any { it.startsWith('HelloJenkins/') }) {
                        appsToBuild.add('HelloJenkins')
                    }
                    if (changedFiles.any { it.startsWith('HelloDevops/') }) {
                        appsToBuild.add('HelloDevops')
                    }

                    echo "Applications to build: ${appsToBuild}"
                }
            }
        }
        stage('Build, Test, Analyze') {
            when {
                expression { appsToBuild.size() > 0 }
            }
            steps {
                script {
                    parallel appsToBuild.collectEntries { app ->
                        ["Pipeline for ${app}": {
                            stage("Building ${app}") {
                                sh "cd ${app} && mvn clean package"
                            }
                            stage("Testing ${app}") {
                                sh "cd ${app} && mvn test"
                            }
                            stage("SonarQube Analysis ${app}") {
                                dir("${app}") {
                                    withCredentials([string(credentialsId: "sonar-token-${app.toLowerCase()}", variable: 'SONAR_TOKEN')]) {
                                        sh """
                                            mvn sonar:sonar \
                                                -Dsonar.projectKey=${app} \
                                                -Dsonar.host.url=http://localhost:9000 \
                                                -Dsonar.login=${SONAR_TOKEN}
                                        """
                                    }
                                }
                            }
                            stage("Quality Gate ${app}") {
                                // Ожидаем результатов анализа и проверяем Quality Gate
                                timeout(time: 1, unit: 'MINUTES') {
                                    waitForQualityGateResult app
                                }
                            }
                        }]
                    }
                }
            }
        }
    }
}

def waitForQualityGateResult(String appName) {
    def qg = waitForSonarQubeQualityGate()
    if (qg.status != 'OK') {
        error "Pipeline aborted due to Quality Gate failure: ${qg.status}"
    } else {
        echo "Quality Gate passed for ${appName}"
    }
}

def waitForSonarQubeQualityGate() {
    // Используем API SonarQube для проверки статуса Quality Gate
    sleep time: 10, unit: 'SECONDS' // Ждем, чтобы анализ успел завершиться

    def sonarHostUrl = 'http://localhost:9000'
    def ceTaskUrl = "${sonarHostUrl}/api/ce/component?component=${env.SONARQUBE_PROJECT_KEY}"

    def response = httpRequest url: ceTaskUrl, authentication: 'sonar-auth', consoleLogResponseBody: true

    def json = readJSON text: response.content

    def analysisId = json.current.analysisId

    def qualityGateUrl = "${sonarHostUrl}/api/qualitygates/project_status?analysisId=${analysisId}"

    response = httpRequest url: qualityGateUrl, authentication: 'sonar-auth', consoleLogResponseBody: true

    json = readJSON text: response.content

    return json.projectStatus
}

