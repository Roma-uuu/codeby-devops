pipeline {
    agent any
    stages {
        stage('Prepare') {
            steps {
                script {
                    // Получаем список измененных файлов
                    changedFiles = sh(returnStdout: true, script: 'git show --pretty="" --name-only').trim().split('\n')

                    // Инициализируем список приложений для сборки
                    appsToBuild = []

                    if (changedFiles.any { it.startsWith('HelloWorld/') }) {
                        appsToBuild.add('HelloWorld')
                    }
                    if (changedFiles.any { it.startsWith('HelloJenkins/') }) {
                        appsToBuild.add('HelloJenkins')
                    }
                    if (changedFiles.any { it.startsWith('HelloDevops/') }) {
                        appsToBuild.add('HelloDevops')
                    }

                    echo "Applications to build: ${appsToBuild}"
                }
            }
        }
        stage('Build and SonarQube Analysis') {
            when {
                expression { appsToBuild.size() > 0 }
            }
            steps {
                script {
                    parallel appsToBuild.collectEntries { app ->
                        ["Build and Analyze ${app}": {
                            stage("Building ${app}") {
                                sh "cd ${app} && mvn clean package"
                            }
                            stage("SonarQube Analysis for ${app}") {
                                dir("${app}") {
                                    withSonarQubeEnv('SonarQube') {
                                        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                                            sh """
                                                mvn sonar:sonar \
                                                -Dsonar.projectKey=${app} \
                                                -Dsonar.host.url=http://localhost:9000 \
                                                -Dsonar.login=${SONAR_TOKEN}
                                            """
                                        }
                                    }
                                }
                            }
                        }]
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
}
